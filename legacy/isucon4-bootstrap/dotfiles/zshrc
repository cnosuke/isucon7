
# User specific environment and startup programs
GOROOT=$HOME/local/go
GOPATH=$GOROOT/bin
NODEPATH=$HOME/local/node-v0.10/bin
PERLPATH=$HOME/local/perl-5.18/bin
RUBYPATH=$HOME/local/ruby-2.0/bin
PYTHONPATH=$HOME/local/python-3.3/bin
PATH=$PYTHONPATH:$RUBYPATH:$PERLPATH:$NODEPATH:$GOPATH:$PATH:$HOME/bin

export PATH GOPATH GOROOT

# hisotry
setopt share_history # 前のほうですでに設定してある。
HISTFILE=$HOME/.zsh-history           # 履歴をファイルに保存する
HISTSIZE=100000                       # メモリ内の履歴の数
SAVEHIST=100000                       # 保存される履歴の数
setopt extended_history               # 履歴ファイルに時刻を記録

setopt auto_cd			# コマンドが省略されていたら cd とみなす
setopt AUTO_PUSHD		  # cd 時にOldDir を自動的にスタックに積む
setopt correct			       # コマンドのスペルチェック
setopt auto_name_dirs		       	 # よく判らん
setopt auto_remove_slash		 # 補完が/で終って、つぎが、語分割子か/かコマンド
setopt extended_history 		 # ヒストリに時刻情報もつける
setopt extended_glob			   # グロブで、特殊文字"#,~,^"を使う、
setopt FUNCTION_ARGZERO 		   #  $0 にスクリプト名/シェル関数名を格納
setopt hist_ignore_dups			      # 前のコマンドと同じならヒストリに入れない
setopt hist_ignore_space		      # 空白ではじまるコマンドをヒストリに保持しない
setopt HIST_IGNORE_ALL_DUPS		      # 重複するヒストリを持たない
setopt HIST_NO_FUNCTIONS		      # 関数定義をヒストリに入れない
setopt HIST_NO_STORE			      	# history コマンドをヒストリに入れない
setopt HIST_REDUCE_BLANKS			# 履歴から冗長な空白を除く
setopt MULTIOS						# 名前付きパイプ的に入出力を複数開ける
setopt NUMERIC_GLOB_SORT				# グロブの数のマッチを辞書式順じゃなくって数値の順
setopt prompt_subst					  # プロンプト文字列で各種展開を行なう
setopt no_promptcr              # 改行コードで終らない出力もちゃんと出力する
setopt pushd_ignore_dups	# ディレクトリスタックに、同じディレクトリを入れない
setopt SHARE_HISTORY		  # 複数プロセスで履歴を共有
setopt SHORT_LOOPS		    # loop の短縮形を許す
setopt sh_word_split		      # よく判らん
setopt RC_EXPAND_PARAM		      	# {}をbash ライクに展開
setopt TRANSIENT_RPROMPT 		# 右プロンプトに入力がきたら消す
# setopt ignore_eof                       #ctrl-D抑制

autoload -U compinit
compinit

alias ls="ls --color -la"
alias rm='rm -i'
alias mv='mv -i'
alias cp='cp -i'
alias be='bundle exec'
alias less="less -MN"
alias vi="vim"

function gg() {
	if [[ -n `git rev-parse --git-dir 2> /dev/null` ]]; then
		git grep -n $@
	else
		find . -type f | xargs grep -n --color=auto $@
	fi
}
alias gs="git status"
alias gd="git diff"
alias ga="git commit -am"
alias gh="git branch"
alias co="git checkout"
alias gl="git log --date=iso --pretty=format:'%h %Cgreen%ad %Cblue%cn %Creset%s %C(blue)%d%Creset' -10"
alias current-branch='git rev-parse --abbrev-ref HEAD'

function gp(){
	if [ $# -ne 0 ]; then
		git push $@ `current-branch`
	else
		git push
	fi
}

# Autojump
[[ -s /home/isucon/.autojump/etc/profile.d/autojump.sh ]] && source /home/isucon/.autojump/etc/profile.d/autojump.sh

autoload -U colors  ; colors

#### スーパーユーザのプロンプトは赤にする
if [ $UID = 0 ] ; then
    PSCOLOR='01;04;31'      # 太字;下線;赤
    USERNAME=root
else
    PSCOLOR='00;32' # Mac以外では緑
    USERNAME=%(!..%n)
fi

RPROMPT=$'%{\e[${PSCOLOR}m%}%F{white}[`rprompt-git-current-branch`%~]%f%{\e[00m%}' # 右プロンプト

PROMPT=$'%{\e[${PSCOLOR}m%}`cat ~/.zsh_prompt`:${USERNAME}:%(5~,%-2~/.../%2~,%~)%f %#%{\e[m%} '


# Show branch name in right prompt
autoload -Uz VCS_INFO_get_data_git; VCS_INFO_get_data_git 2> /dev/null
function rprompt-git-current-branch {
   local name st color gitdir action
   if [[ "$PWD" =~ '/¥.git(/.*)?$' ]]; then
      return
   fi
   name=$(basename "`git symbolic-ref HEAD 2> /dev/null`")
   if [[ -z $name ]]; then
      return
   fi
   gitdir=`git rev-parse --git-dir 2> /dev/null`
   action=`VCS_INFO_git_getaction "$gitdir"` && action="($action)"
   st=`git status 2> /dev/null`
   if [[ -n `echo "$st" | grep "^nothing to"` ]]; then
      color=%F{white}
   elif [[ -n `echo "$st" | grep "^nothing added"` ]]; then
      color=%F{blue}
   elif [[ -n `echo "$st" | grep "^# Untracked"` ]]; then
      color=%B%F{red}
   else
      color=%F{red}
   fi
   echo "${color}(${name}${action})%f%b"
}

export LANG=ja_JP.UTF-8

alias bench="sudo isucon3 benchmark --init /home/isucon/webapp/ruby/init_script/init.sh --workload 1"
alias deploy="sh /home/isucon/app/deploy.sh"

[ -f ~/.zshrc.local ] && source ~/.zshrc.local
